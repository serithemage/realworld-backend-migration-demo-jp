# Task ID: 5
# Title: ユーザー管理サービスの実装
# Status: pending
# Dependencies: 2, 3, 4
# Priority: high
# Description: ユーザー登録、ログイン、ユーザー情報の取得と更新を処理する Lambda 関数を実装します。
# Details:
1. ユーザー管理 Lambda 関数の実装:
```java
public class UserHandler implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {
    private final DynamoDbClient dynamoDbClient = DynamoDbClient.create();
    private final String TABLE_NAME = System.getenv("USERS_TABLE_NAME");
    
    @Override
    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {
        String path = input.getPath();
        String httpMethod = input.getHttpMethod();
        
        if (path.equals("/api/users") && httpMethod.equals("POST")) {
            return registerUser(input);
        } else if (path.equals("/api/users/login") && httpMethod.equals("POST")) {
            return loginUser(input);
        } else if (path.equals("/api/user") && httpMethod.equals("GET")) {
            return getCurrentUser(input);
        } else if (path.equals("/api/user") && httpMethod.equals("PUT")) {
            return updateUser(input);
        }
        
        return new APIGatewayProxyResponseEvent()
                .withStatusCode(404)
                .withBody("Not Found");
    }
    
    private APIGatewayProxyResponseEvent registerUser(APIGatewayProxyRequestEvent input) {
        // ユーザー登録ロジックを実装
    }
    
    private APIGatewayProxyResponseEvent loginUser(APIGatewayProxyRequestEvent input) {
        // ログインロジックを実装
    }
    
    private APIGatewayProxyResponseEvent getCurrentUser(APIGatewayProxyRequestEvent input) {
        // 現在のユーザー情報取得ロジックを実装
    }
    
    private APIGatewayProxyResponseEvent updateUser(APIGatewayProxyRequestEvent input) {
        // ユーザー情報更新ロジックを実装
    }
}
```

2. API Gateway との統合:
```typescript
const userHandler = new lambda.Function(this, 'UserHandler', {
  runtime: lambda.Runtime.JAVA_21,
  code: lambda.Code.fromAsset('../target/user-handler.jar'),
  handler: 'com.realworld.UserHandler::handleRequest',
  environment: {
    USERS_TABLE_NAME: usersTable.tableName
  },
  timeout: cdk.Duration.seconds(30)
});

usersTable.grantReadWriteData(userHandler);

usersResource.addMethod('POST', new apigateway.LambdaIntegration(userHandler));
usersResource.addResource('login').addMethod('POST', new apigateway.LambdaIntegration(userHandler));
userResource.addMethod('GET', new apigateway.LambdaIntegration(userHandler), {
  authorizer: authorizer,
  authorizationType: apigateway.AuthorizationType.COGNITO
});
userResource.addMethod('PUT', new apigateway.LambdaIntegration(userHandler), {
  authorizer: authorizer,
  authorizationType: apigateway.AuthorizationType.COGNITO
});
```

# Test Strategy:
1. ユーザー登録、ログイン、情報取得、更新の各エンドポイントのユニットテスト
2. DynamoDB との統合テスト（モックを使用）
3. Cognito との統合テスト（モックを使用）
4. API Gateway を通じたエンドツーエンドテスト
5. エラーケースのテスト（無効な入力、重複ユーザー、認証エラーなど）
6. パフォーマンステスト（レスポンスタイム、スループット）

# Subtasks:
## 1. Implement User Registration and Validation Logic [pending]
### Dependencies: None
### Description: Create the user registration flow with proper input validation and error handling
### Details:
Develop the registration endpoint that validates user inputs (email, password, profile information), implements password strength requirements, handles duplicate account prevention, integrates with Cognito for user creation, stores additional user metadata in DynamoDB, and implements proper error handling for all potential failure scenarios.

## 2. Develop Login and Authentication Flow [pending]
### Dependencies: 5.1
### Description: Implement secure authentication mechanisms with proper session management
### Details:
Create authentication endpoints that verify user credentials against Cognito, implement JWT token generation and validation, add refresh token functionality, integrate multi-factor authentication if required, implement proper session timeout handling, and add comprehensive logging for security events.

## 3. Build User Profile Functionality [pending]
### Dependencies: 5.2
### Description: Create endpoints for retrieving and updating user profile information
### Details:
Develop API endpoints to fetch user profiles from DynamoDB, implement profile update functionality with proper validation, add profile picture upload and management, ensure proper authorization checks for profile access, and implement versioning for profile changes.

## 4. Integrate AWS Services and Security Best Practices [pending]
### Dependencies: 5.1, 5.2, 5.3
### Description: Ensure proper integration with DynamoDB and Cognito following AWS security best practices
### Details:
Implement least privilege IAM roles for service access, set up proper error handling for AWS service failures, implement connection pooling for DynamoDB, add caching strategies for frequently accessed user data, ensure proper encryption for sensitive data at rest and in transit, and add comprehensive monitoring and alerting for the user management service.

